/* Generated By:JavaCC: Do not edit this line. ExpressionParser.java */
package LambdaCalculus.Parser;

import LambdaCalculus.*;
import java.util.List;
import java.util.ArrayList;

public class ExpressionParser implements ExpressionParserConstants {

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    ExpressionParser parser = new ExpressionParser(System.in);
    parser.Input();
  }

/** Root production. */
  final public void Input() throws ParseException {
    parse();
    jj_consume_token(0);
  }

  final public Expression parse() throws ParseException {
    Variable var = null;
    Expression left = null;
    Expression right = null;
    Token t=null;
    Token t2=null;
    Token t3=null;
    List<Term> terms = null;
    if (jj_2_12(10)) {
      jj_consume_token(LAMBDA);
      t = jj_consume_token(VARIABLE);
      jj_consume_token(LPAR);
      if (jj_2_1(10)) {
        left = parse();
      } else {
        ;
      }
      jj_consume_token(RPAR);
    LambdaAbstraction abs = new LambdaAbstraction();
    abs.setVar(new Variable(t.toString().replace("Var-","")));
    abs.setBody(left);

    {if (true) return abs;}
    } else if (jj_2_13(10)) {
      t = jj_consume_token(ARGMIN_OR_MAX);
      t2 = jj_consume_token(VARIABLE);
      jj_consume_token(LPAR);
      if (jj_2_2(10)) {
        left = parse();
      } else {
        ;
      }
      jj_consume_token(RPAR);
      jj_consume_token(LPAR);
      if (jj_2_3(10)) {
        right = parse();
      } else {
        ;
      }
      jj_consume_token(RPAR);
    AggregationQuantifier agg = null;
    if(t.toString().equals("argmin")){
        agg = new AggregationQuantifier(left, right, AggregationQuantifier.Quantor.argmin, new Variable(t2.toString().replace("Var-","")));
    }
    else if(t.toString().equals("argmax")){
        agg = new AggregationQuantifier(left, right, AggregationQuantifier.Quantor.argmax, new Variable(t2.toString().replace("Var-","")));
    }

    {if (true) return agg;}
    } else if (jj_2_14(10)) {
      jj_consume_token(L_SQ_BRACKET);
      if (jj_2_4(10)) {
        left = parse();
      } else {
        ;
      }
      jj_consume_token(R_SQ_BRACKET);
        {if (true) return left;}
    } else if (jj_2_15(10)) {
      jj_consume_token(LPAR);
      if (jj_2_5(10)) {
        left = parse();
      } else {
        ;
      }
      jj_consume_token(RPAR);
        {if (true) return left;}
    } else if (jj_2_16(10)) {
      jj_consume_token(COUNT);
      if (jj_2_6(10)) {
        left = parse();
      } else {
        ;
      }
        CountingQuantifier c = new CountingQuantifier(left, CountingQuantifier.Quantor.count);
        {if (true) return c;}
    } else if (jj_2_17(10)) {
      jj_consume_token(ASK);
      if (jj_2_7(10)) {
        left = parse();
      } else {
        ;
      }
        ExistQuantifier c = new ExistQuantifier(left, ExistQuantifier.Quantor.ask);
        {if (true) return c;}
    } else if (jj_2_18(10)) {
      jj_consume_token(L_CURL_BRACKET);
      t = jj_consume_token(VARIABLE);
      jj_consume_token(R_CURL_BRACKET);
      jj_consume_token(APPLIED);
      t2 = jj_consume_token(VARIABLE);
      if (jj_2_8(10)) {
        right = parse();
      } else {
        ;
      }
        MultiConnector m = new MultiConnector();
        FunctionalApplication f = new FunctionalApplication();
        f.setFunction(new Variable(t.toString().replace("Var-","")));
        f.setArgument(new Variable(t2.toString().replace("Var-","")));

        m.add(f);

        if(right!=null){
            if(right instanceof MultiConnector){
                MultiConnector mRight = (MultiConnector) right;
                for(Expression p : mRight.getPredicates()){
                    m.add(p);
                }
            }
            if(right instanceof Atom){
                m.add(right);
            }
            if(right instanceof FunctionalApplication){
                m.add(right);
            }
            {if (true) return m;}
        }
        else{
            {if (true) return f;}
        }
    } else if (jj_2_19(10)) {
      t = jj_consume_token(PREDICATE);
      jj_consume_token(LPAR);
      if (jj_2_9(10)) {
        terms = ListOfTerms();
      } else {
        ;
      }
      jj_consume_token(RPAR);
      if (jj_2_10(10)) {
        right = parse();
      } else {
        ;
      }
        Atom lf = new Atom();
        String predicateName = t.toString().replace("Pred-","");

        lf.setPredicate(predicateName);

        for(Term t1: terms)
        {
             lf.add(t1);
        }
        MultiConnector mf = new MultiConnector();
        mf.add(lf);
        if(right!=null){
            if(right instanceof MultiConnector){
                MultiConnector mRight = (MultiConnector) right;
                for(Expression p : mRight.getPredicates()){
                    mf.add(p);
                }
            }
            if(right instanceof Atom){
                mf.add(right);
            }
            if(right instanceof FunctionalApplication){
                mf.add(right);
            }
            {if (true) return mf;}
        }
        else{
            {if (true) return lf;}
        }
    } else if (jj_2_20(10)) {
      jj_consume_token(AND);
      if (jj_2_11(10)) {
        left = parse();
      } else {
        ;
      }
        if(left instanceof Atom){
              {if (true) return left;}
        }
        if(left instanceof FunctionalApplication){
              {if (true) return left;}
        }
        {if (true) return left;}
    } else if (jj_2_21(10)) {
      t = jj_consume_token(VARIABLE);
    {if (true) return new Variable(t.toString().replace("Var-",""));}
    } else if (jj_2_22(10)) {
      t = jj_consume_token(CONSTANT);
    {if (true) return new Constant(t.toString().replace("Cons-",""));}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/** ListOfTerms*/
  final public List<Term> ListOfTerms() throws ParseException {
    Token var = null;
    List<Term> terms=null;
    List<Term> rightTerms=null;
    if (jj_2_25(10)) {
      var = jj_consume_token(VARIABLE);
      if (jj_2_23(10)) {
        rightTerms = ListOfTerms();
      } else {
        ;
      }
    terms = new ArrayList<Term>();
    terms.add(new Variable(var.toString().replace("Var-","")));
    if(rightTerms!=null){
        for(Term t1: rightTerms){
            terms.add(t1);
        }
    }
    {if (true) return terms;}
    } else if (jj_2_26(10)) {
      var = jj_consume_token(CONSTANT);
      if (jj_2_24(10)) {
        rightTerms = ListOfTerms();
      } else {
        ;
      }
    terms = new ArrayList<Term>();
    terms.add(new Constant(var.toString().replace("Cons-","")));
    if(rightTerms!=null){
        for(Term t1: rightTerms){
            terms.add(t1);
        }
    }
    {if (true) return terms;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_3_1() {
    if (jj_3R_1()) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(CONSTANT)) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(PREDICATE)) return true;
    if (jj_scan_token(LPAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) jj_scanpos = xsp;
    if (jj_scan_token(RPAR)) return true;
    xsp = jj_scanpos;
    if (jj_3_10()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(LPAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) jj_scanpos = xsp;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_3R_2()) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_1()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(L_SQ_BRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) jj_scanpos = xsp;
    if (jj_scan_token(R_SQ_BRACKET)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_1()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(AND)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_2()) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(CONSTANT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(ARGMIN_OR_MAX)) return true;
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(LPAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) jj_scanpos = xsp;
    if (jj_scan_token(RPAR)) return true;
    if (jj_scan_token(LPAR)) return true;
    xsp = jj_scanpos;
    if (jj_3_3()) jj_scanpos = xsp;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_2()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_1()) return true;
    return false;
  }

  private boolean jj_3R_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(LAMBDA)) return true;
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(LPAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) jj_scanpos = xsp;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_1()) return true;
    return false;
  }

  private boolean jj_3R_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) return true;
    }
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(VARIABLE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(L_CURL_BRACKET)) return true;
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(R_CURL_BRACKET)) return true;
    if (jj_scan_token(APPLIED)) return true;
    if (jj_scan_token(VARIABLE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_1()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_1()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(ASK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_1()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_1()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(COUNT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_1()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ExpressionParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[26];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ExpressionParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ExpressionParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ExpressionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ExpressionParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ExpressionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ExpressionParser(ExpressionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ExpressionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[23];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 23; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 26; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
