//
's	((N\NP)/(N/NP))	lambda Var-P(Var-P)
give me	(S/NP)	lambda Var-g(lambda Var-x({Var-g}@Var-x))
a	(NP/N)	lambda Var-P(Var-P)
a	(NP/NP)	lambda Var-P(Var-P)
all	(NP/N)	lambda Var-P(Var-P)
all	(NP/NP)	lambda Var-P(Var-P)
and	(((N\N)\(N\N))/(N\N))	lambda Var-P(Var-P)
and	((N\N)/N)	lambda Var-P(Var-P)
and	((NP\NP)/NP)	lambda Var-P(Var-P)
and	((((S\NP)/NP)\((S\NP)/NP))/((S\NP)/NP))	lambda Var-P(Var-P)
and	(((S/NP)\(S/NP))/(S/NP))	lambda Var-P(Var-P)
and	(((S\NP)\(S\NP))/(S\NP))	lambda Var-g(lambda Var-h(lambda Var-x([{Var-g}@Var-x and {Var-h}@Var-x])))
are	((N\N)/(N\N))	lambda Var-P(Var-P)
are	((NP\N)/(NP/N))	lambda Var-P(Var-P)
are	((S\NP)/(N\N))	lambda Var-P(Var-P)
are	((S\NP)/N)	lambda Var-P(Var-P)
are	((S\NP)/NP)	lambda Var-P(Var-P)
are	((S\NP)/(S\NP))	lambda Var-P(Var-P)
are	((S\NP)/(S/NP))	lambda Var-P(Var-P)
are	((S/((S\NP)/NP))/NP)	lambda Var-x(lambda Var-g(ask [{Var-g}@Var-x]))
are	((S/NP)/NP)	lambda Var-x(lambda Var-g(ask [{Var-g}@Var-x]))
are	((S/(S\NP))/NP)	lambda Var-x(lambda Var-g(ask [{Var-g}@Var-x]))
are there	((N\N)/(N\N))	lambda Var-P(Var-P)
are there	(NP/NP)	lambda Var-P(Var-P)
are there	(S\NP)	lambda Var-P(Var-P)
are there	((S\NP)/(S\NP))	lambda Var-P(Var-P)
been	((S\NP)/NP)	lambda Var-P(Var-P)
been	(((S\NP)/NP)/((S\NP)/NP))	lambda Var-P(Var-P)
been	((S\NP)/(S\NP))	lambda Var-P(Var-P)
//by	(NP/NP)	lambda Var-P(Var-P)
//did	(((S\NP)/((S\NP)/NP))/NP)	lambda Var-P(Var-P)
//did	((S/(S\NP))/NP)	lambda Var-P(Var-P)
did	((S/((S\NP)/NP))/NP)	lambda Var-x(lambda Var-g(ask [{Var-g}@Var-x]))
did	((S/NP)/NP)	lambda Var-x(lambda Var-g(ask [{Var-g}@Var-x]))
did	((S/(S\NP))/NP)	lambda Var-x(lambda Var-g(ask [{Var-g}@Var-x]))
did	((S/(S\NP))/NP)	lambda Var-x(lambda Var-g({Var-g}@Var-x))
//does	((NP/((S\NP)/NP))/NP)	lambda Var-P(Var-P)
//does	((S/NP)/(S/NP))	lambda Var-P(Var-P)
//does	((S\NP)/(S\NP))	lambda Var-P(Var-P)
//does	((S/(S\NP))/NP)	lambda Var-P(Var-P)
does	((S/((S\NP)/NP))/NP)	lambda Var-x(lambda Var-g(ask [{Var-g}@Var-x]))
does	((S/NP)/NP)	lambda Var-x(lambda Var-g(ask [{Var-g}@Var-x]))
does	((S/(S\NP))/NP)	lambda Var-x(lambda Var-g(ask [{Var-g}@Var-x]))
does	((S/(S\NP))/N)	lambda Var-g(lambda Var-h(lambda Var-x(ask [[{Var-g}@Var-x and {Var-h}@Var-x]])))
does	((S/(S\NP))/NP)	lambda Var-x(lambda Var-g({Var-g}@Var-x))
//do	((S/(S\NP))/NP)	lambda Var-P(Var-P)
give me	(S/NP)	lambda Var-P(Var-P)
give me	(S/NP)	lambda Var-g(lambda Var-x({Var-g}@Var-x))
give me a list of	(S/NP)	lambda Var-g(lambda Var-x({Var-g}@Var-x))
has	(((S\NP)\N)/(NP/N))	lambda Var-P(Var-P)
has	((S\NP)/(NP/N))	lambda Var-P(Var-P)
has	((S\NP)/NP)	lambda Var-P(Var-P)
have	((S\NP)/(NP/N))	lambda Var-P(Var-P)
have	((S\NP)/NP)	lambda Var-P(Var-P)
have	((S/NP)/(S/NP))	lambda Var-P(Var-P)
//how many	(S/N)	lambda Var-P(Var-P)
//how many	(S/N)	lambda Var-g(lambda Var-x (count ({Var-g}@Var-x)))
how many	((S/(S/NP))/N)	lambda Var-g(lambda Var-h(lambda Var-x(count [[{Var-g}@Var-x and {Var-h}@Var-x]])))
how many	((S/(S\NP))/N)	lambda Var-g(lambda Var-h(lambda Var-x(count [[{Var-g}@Var-x and {Var-h}@Var-x]])))
//how many	((S/(S/NP))/((S\NP)/NP))	lambda Var-P(Var-P)
//how many	((S/(S\NP))/((S\NP)/NP))	lambda Var-P(Var-P)
how many	((S/(S\NP))/N)	lambda Var-g(lambda Var-x (count ({Var-g}@Var-x)))
how many	((S/(S/NP))/N)	lambda Var-g(lambda Var-x (count ({Var-g}@Var-x)))
how often	(S/(S/NP))	lambda Var-g(lambda Var-x (count ({Var-g}@Var-x)))
is	((NP\N)/(NP/N))	lambda Var-P(Var-P)
is	((S\NP)/NP)	lambda Var-P(Var-P)
is	((S/NP)/(S/NP))	lambda Var-P(Var-P)
is	((S\NP)/(S\NP))	lambda Var-P(Var-P)
is	((S/((S\NP)/NP))/NP)	lambda Var-x(lambda Var-g(ask [{Var-g}@Var-x]))
is	((S/NP)/NP)	lambda Var-x(lambda Var-g(ask [{Var-g}@Var-x]))
is	((S/(S\NP))/NP)	lambda Var-x(lambda Var-g(ask [{Var-g}@Var-x]))
list	(NP/NP)	lambda Var-P(Var-P)
list	(S/NP)	lambda Var-P(Var-P)
list	(S/NP)	lambda Var-g(lambda Var-x({Var-g}@Var-x))
//of	((N\N)/NP)	lambda Var-g(lambda Var-h(lambda Var-x([{Var-g}@Var-x and {Var-h}@Var-x])))
of	(NP/NP)	lambda Var-P(Var-P)
show me	(S/NP)	lambda Var-P(Var-P)
show me	(S/NP)	lambda Var-g(lambda Var-x({Var-g}@Var-x))
show me a list of	(S/NP)	lambda Var-g(lambda Var-x({Var-g}@Var-x))
//some	(NP/N)	lambda Var-P(Var-P)
that	((N\N)/(N\N))	lambda Var-g(lambda Var-h(lambda Var-x([{Var-g}@Var-x and {Var-h}@Var-x])))
that	((N\N)/NP)	lambda Var-g(lambda Var-h(lambda Var-x([{Var-g}@Var-x and {Var-h}@Var-x])))
that	((N\N)/(S/NP))	lambda Var-g(lambda Var-h(lambda Var-x([{Var-g}@Var-x and {Var-h}@Var-x])))
that	((N\N)/(S\NP))	lambda Var-g(lambda Var-h(lambda Var-x([{Var-g}@Var-x and {Var-h}@Var-x])))
the	(NP/N)	lambda Var-P(Var-P)
the	(NP/NP)	lambda Var-P(Var-P)
was	((S\NP)/NP)	lambda Var-P(Var-P)
was	((S\NP)/N)	lambda Var-P(Var-P)
was	(((S\NP)/NP)/((S\NP)/NP))	lambda Var-P(Var-P)
was	((S\NP)/(S\NP))	lambda Var-P(Var-P)
was	((S/(S\NP))/NP)	lambda Var-P(Var-P)
was	((S/(S\NP))/NP)	lambda Var-x(lambda Var-g({Var-g}@Var-x))
was	((S/((S\NP)/NP))/NP)	lambda Var-x(lambda Var-g(ask [{Var-g}@Var-x]))
was	((S/NP)/NP)	lambda Var-x(lambda Var-g(ask [{Var-g}@Var-x]))
was	((S/(S\NP))/NP)	lambda Var-x(lambda Var-g(ask [{Var-g}@Var-x]))
were	((S\NP)/NP)	lambda Var-P(Var-P)
were	(((S\NP)/NP)/((S\NP)/NP))	lambda Var-P(Var-P)
were	((S\NP)/(S\NP))	lambda Var-P(Var-P)
were	((S/(S\NP))/NP)	lambda Var-P(Var-P)
were	((S/((S\NP)/NP))/NP)	lambda Var-x(lambda Var-g(ask [{Var-g}@Var-x]))
were	((S/NP)/NP)	lambda Var-x(lambda Var-g(ask [{Var-g}@Var-x]))
were	((S/(S\NP))/NP)	lambda Var-x(lambda Var-g(ask [{Var-g}@Var-x]))
what	NP	lambda Var-P(Var-P)
//what	NP	lambda Var-g(lambda Var-x({Var-g}@Var-x))
what	((S/(S/NP))/N)	lambda Var-g(lambda Var-h(lambda Var-x([{Var-g}@Var-x and {Var-h}@Var-x])))
what	((S/(S\NP))/N)	lambda Var-g(lambda Var-h(lambda Var-x([{Var-g}@Var-x and {Var-h}@Var-x])))
//what	((S/(S\NP))/N)	lambda Var-P(Var-P)
what	(S/(S/NP))	lambda Var-P(Var-P)
when	(S/(S/NP))	lambda Var-g(lambda Var-x({Var-g}@Var-x))
when	(S/(S\NP))	lambda Var-g(lambda Var-x({Var-g}@Var-x))
where	(S/(S/NP))	lambda Var-g(lambda Var-x({Var-g}@Var-x))
where	(S/(S\NP))	lambda Var-g(lambda Var-x({Var-g}@Var-x))
//which	((N\N)/(N\N))	lambda Var-g(lambda Var-h(lambda Var-x([{Var-g}@Var-x and {Var-h}@Var-x])))
//which	((N\N)/(S/NP))	lambda Var-g(lambda Var-h(lambda Var-x([{Var-g}@Var-x and {Var-h}@Var-x])))
//which	((N\N)/(S\NP))	lambda Var-g(lambda Var-h(lambda Var-x([{Var-g}@Var-x and {Var-h}@Var-x])))
//which	NP	lambda Var-P(Var-P)
//which	(S/NP)	lambda Var-P(Var-P)
which	((S/(S/NP))/N)	lambda Var-g(lambda Var-h(lambda Var-x([{Var-g}@Var-x and {Var-h}@Var-x])))
which	((S/(S\NP))/N)	lambda Var-g(lambda Var-h(lambda Var-x([{Var-g}@Var-x and {Var-h}@Var-x])))
in which	((S/(S/NP))/N)	lambda Var-g(lambda Var-h(lambda Var-x([{Var-g}@Var-x and {Var-h}@Var-x])))
in which	((S/(S\NP))/N)	lambda Var-g(lambda Var-h(lambda Var-x([{Var-g}@Var-x and {Var-h}@Var-x])))
to which	((S/(S/NP))/N)	lambda Var-g(lambda Var-h(lambda Var-x([{Var-g}@Var-x and {Var-h}@Var-x])))
to which	((S/(S\NP))/N)	lambda Var-g(lambda Var-h(lambda Var-x([{Var-g}@Var-x and {Var-h}@Var-x])))
for which	((S/(S/NP))/N)	lambda Var-g(lambda Var-h(lambda Var-x([{Var-g}@Var-x and {Var-h}@Var-x])))
for which	((S/(S\NP))/N)	lambda Var-g(lambda Var-h(lambda Var-x([{Var-g}@Var-x and {Var-h}@Var-x])))
who	NP	lambda Var-P(Var-P)
//who	((N\N)/NP)	lambda Var-g(lambda Var-h(lambda Var-x([{Var-g}@Var-x and {Var-h}@Var-x])))
//who	((N\N)/(N\N))	lambda Var-g(lambda Var-h(lambda Var-x([{Var-g}@Var-x and {Var-h}@Var-x])))
//who	((N\N)/(S/NP))	lambda Var-g(lambda Var-h(lambda Var-x([{Var-g}@Var-x and {Var-h}@Var-x])))
//who	((N\N)/(S\NP))	lambda Var-g(lambda Var-h(lambda Var-x([{Var-g}@Var-x and {Var-h}@Var-x])))
with	((N\N)/(S/NP))	lambda Var-g(lambda Var-h(lambda Var-x([{Var-g}@Var-x and {Var-h}@Var-x])))
with	((N\N)/(S\NP))	lambda Var-g(lambda Var-h(lambda Var-x([{Var-g}@Var-x and {Var-h}@Var-x])))
with	((NP\N)/(NP/N))	lambda Var-P(Var-P)
//test
country	N	lambda Var-x(Pred-http://www.w3.org/1999/02/22-rdf-syntax-ns#type (Var-x Cons-http://www.w3.org/2002/07/owl#Thing))
